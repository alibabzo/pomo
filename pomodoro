#!/usr/bin/env bash

# Copyright (c) 2013, James Spencer.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

#--- pomo.sh ---

# pomo.sh is a simple Pomodoro timer.  It works by creating a file ($POMO) and
# inspecting the modification timestamp of that file to determine for how long
# a Pomodoro block has been running.  Pausing a Pomodoro block works by storing
# how long the Pomodoro block has been running in the $POMO file.  A paused
# Pomodoro block can then be resumed by updating the modification timestamp of
# the POMO file accordingly.

# This version has been edited so that it works with gabrielelana's pomodoro icons
# (https://github.com/gabrielelana/pomicons)
# and i3blocks (https://github.com/vivien/i3blocks).

#--- Configuration ---

POMO=$HOME/.local/share/pomo

WORK_TIME=25
BREAK_TIME=5

#--- Pomodoro functions ---

function pomo_start {
    # Start new pomo block (work+break cycle).
    test -e $(dirname $POMO) || mkdir $(dirname $POMO)
    touch $POMO
}

function pomo_stop {
    # Stop pomo cycles.
    rm -f $POMO
}

function pomo_ispaused {
    # Return 0 if paused, 1 otherwise.
    # pomo.sh is paused if the POMO file contains any information.
    [[ $(wc -l $POMO | cut -d" " -f1) -gt 0 ]]
    return $?
}

function pomo_pause {
    # Toggle the pause status on the POMO file.
    if pomo_ispaused; then
        # Restart a paused pomo block by updating the time stamp of the POMO
        # file.
        running=$(pomo_stat)
        mtime=$(date --date "@$(( $(date +%s) - running))" +%m%d%H%M.%S)
        rm $POMO # erase saved time stamp.
        touch -m -t $mtime $POMO
    else
        # Pause a pomo block.
        running=$(pomo_stat)
        echo $running > $POMO
    fi
}

function pomo_update {
    # Update the time stamp on POMO a new cycle has started.
    running=$(pomo_stat)
    block_time=$(( (WORK_TIME+BREAK_TIME)*60 ))
    if [[ $running -ge $block_time ]]; then
        ago=$(( running % block_time )) # We should've started the new cycle a while ago?
        mtime=$(date --date "@$(( $(date +%s) - ago))" +%m%d%H%M.%S)
        touch -m -t $mtime $POMO
    fi
}

function pomo_stat {
    # Return number of seconds since start of pomo block (work+break cycle).
    [[ -e $POMO ]] && running=$(cat $POMO) || running=0
    if [[ -z $running ]]; then
        pomo_start=$(stat -c +%Y $POMO)
        now=$(date +%s)
        running=$((now-pomo_start))
    fi
    echo $running
}

function pomo_clock {
    # Print out how much time is remaining in block.
    # WMM:SS indicates MM:SS left in the work block.
    # BMM:SS indicates MM:SS left in the break block.
    if [[ -e $POMO ]]; then
        pomo_update
        running=$(pomo_stat)
        left=$(( WORK_TIME*60 - running ))
        if [[ $left -lt 0 ]]; then
            left=$(( left + BREAK_TIME*60 ))
            prefix=        # ignore the strange unicode
        else
            prefix=        # and again
        fi
        pomo_ispaused && prefix=
        min=$(( left / 60 ))
        sec=$(( left - 60*min ))
        printf "%2s%02d:%02d" $prefix $min $sec
    else
        printf "00:00"     # and again
    fi
}
case $BLOCK_BUTTON in
    1) pomo_start ;;          # left click to start timer
    2) pomo_stop ;;           # middle click to stop timer
    3) pomo_pause ;;          # right click to pause timer
esac

echo $(pomo_clock)          # echo status
echo $(pomo_clock)
